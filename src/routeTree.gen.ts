/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as UploadRouteImport } from './routes/upload';
import { Route as SearchResultsRouteImport } from './routes/search-results';
import { Route as HomeRouteImport } from './routes/home';
import { Route as BridesRouteImport } from './routes/brides';
import { Route as IndexRouteImport } from './routes/index';
import { Route as PictureDetailPictureIdRouteImport } from './routes/picture-detail.$pictureId';
import { Route as FolderFolderIdRouteImport } from './routes/folder.$folderId';
import { Route as BrideDetailBrideIdRouteImport } from './routes/bride-detail.$brideId';
import { Route as FolderDetailsFolderIdSubcategorySubcategoryIdRouteImport } from './routes/folder-details.$folderId.subcategory.$subcategoryId';

const UploadRoute = UploadRouteImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRouteImport,
} as any);
const SearchResultsRoute = SearchResultsRouteImport.update({
  id: '/search-results',
  path: '/search-results',
  getParentRoute: () => rootRouteImport,
} as any);
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any);
const BridesRoute = BridesRouteImport.update({
  id: '/brides',
  path: '/brides',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const PictureDetailPictureIdRoute = PictureDetailPictureIdRouteImport.update({
  id: '/picture-detail/$pictureId',
  path: '/picture-detail/$pictureId',
  getParentRoute: () => rootRouteImport,
} as any);
const FolderFolderIdRoute = FolderFolderIdRouteImport.update({
  id: '/folder/$folderId',
  path: '/folder/$folderId',
  getParentRoute: () => rootRouteImport,
} as any);
const BrideDetailBrideIdRoute = BrideDetailBrideIdRouteImport.update({
  id: '/bride-detail/$brideId',
  path: '/bride-detail/$brideId',
  getParentRoute: () => rootRouteImport,
} as any);
const FolderDetailsFolderIdSubcategorySubcategoryIdRoute =
  FolderDetailsFolderIdSubcategorySubcategoryIdRouteImport.update({
    id: '/folder-details/$folderId/subcategory/$subcategoryId',
    path: '/folder-details/$folderId/subcategory/$subcategoryId',
    getParentRoute: () => rootRouteImport,
  } as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/brides': typeof BridesRoute;
  '/home': typeof HomeRoute;
  '/search-results': typeof SearchResultsRoute;
  '/upload': typeof UploadRoute;
  '/bride-detail/$brideId': typeof BrideDetailBrideIdRoute;
  '/folder/$folderId': typeof FolderFolderIdRoute;
  '/picture-detail/$pictureId': typeof PictureDetailPictureIdRoute;
  '/folder-details/$folderId/subcategory/$subcategoryId': typeof FolderDetailsFolderIdSubcategorySubcategoryIdRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/brides': typeof BridesRoute;
  '/home': typeof HomeRoute;
  '/search-results': typeof SearchResultsRoute;
  '/upload': typeof UploadRoute;
  '/bride-detail/$brideId': typeof BrideDetailBrideIdRoute;
  '/folder/$folderId': typeof FolderFolderIdRoute;
  '/picture-detail/$pictureId': typeof PictureDetailPictureIdRoute;
  '/folder-details/$folderId/subcategory/$subcategoryId': typeof FolderDetailsFolderIdSubcategorySubcategoryIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/brides': typeof BridesRoute;
  '/home': typeof HomeRoute;
  '/search-results': typeof SearchResultsRoute;
  '/upload': typeof UploadRoute;
  '/bride-detail/$brideId': typeof BrideDetailBrideIdRoute;
  '/folder/$folderId': typeof FolderFolderIdRoute;
  '/picture-detail/$pictureId': typeof PictureDetailPictureIdRoute;
  '/folder-details/$folderId/subcategory/$subcategoryId': typeof FolderDetailsFolderIdSubcategorySubcategoryIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/brides'
    | '/home'
    | '/search-results'
    | '/upload'
    | '/bride-detail/$brideId'
    | '/folder/$folderId'
    | '/picture-detail/$pictureId'
    | '/folder-details/$folderId/subcategory/$subcategoryId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/brides'
    | '/home'
    | '/search-results'
    | '/upload'
    | '/bride-detail/$brideId'
    | '/folder/$folderId'
    | '/picture-detail/$pictureId'
    | '/folder-details/$folderId/subcategory/$subcategoryId';
  id:
    | '__root__'
    | '/'
    | '/brides'
    | '/home'
    | '/search-results'
    | '/upload'
    | '/bride-detail/$brideId'
    | '/folder/$folderId'
    | '/picture-detail/$pictureId'
    | '/folder-details/$folderId/subcategory/$subcategoryId';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  BridesRoute: typeof BridesRoute;
  HomeRoute: typeof HomeRoute;
  SearchResultsRoute: typeof SearchResultsRoute;
  UploadRoute: typeof UploadRoute;
  BrideDetailBrideIdRoute: typeof BrideDetailBrideIdRoute;
  FolderFolderIdRoute: typeof FolderFolderIdRoute;
  PictureDetailPictureIdRoute: typeof PictureDetailPictureIdRoute;
  FolderDetailsFolderIdSubcategorySubcategoryIdRoute: typeof FolderDetailsFolderIdSubcategorySubcategoryIdRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/upload': {
      id: '/upload';
      path: '/upload';
      fullPath: '/upload';
      preLoaderRoute: typeof UploadRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/search-results': {
      id: '/search-results';
      path: '/search-results';
      fullPath: '/search-results';
      preLoaderRoute: typeof SearchResultsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/home': {
      id: '/home';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/brides': {
      id: '/brides';
      path: '/brides';
      fullPath: '/brides';
      preLoaderRoute: typeof BridesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/picture-detail/$pictureId': {
      id: '/picture-detail/$pictureId';
      path: '/picture-detail/$pictureId';
      fullPath: '/picture-detail/$pictureId';
      preLoaderRoute: typeof PictureDetailPictureIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/folder/$folderId': {
      id: '/folder/$folderId';
      path: '/folder/$folderId';
      fullPath: '/folder/$folderId';
      preLoaderRoute: typeof FolderFolderIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/bride-detail/$brideId': {
      id: '/bride-detail/$brideId';
      path: '/bride-detail/$brideId';
      fullPath: '/bride-detail/$brideId';
      preLoaderRoute: typeof BrideDetailBrideIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/folder-details/$folderId/subcategory/$subcategoryId': {
      id: '/folder-details/$folderId/subcategory/$subcategoryId';
      path: '/folder-details/$folderId/subcategory/$subcategoryId';
      fullPath: '/folder-details/$folderId/subcategory/$subcategoryId';
      preLoaderRoute: typeof FolderDetailsFolderIdSubcategorySubcategoryIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BridesRoute: BridesRoute,
  HomeRoute: HomeRoute,
  SearchResultsRoute: SearchResultsRoute,
  UploadRoute: UploadRoute,
  BrideDetailBrideIdRoute: BrideDetailBrideIdRoute,
  FolderFolderIdRoute: FolderFolderIdRoute,
  PictureDetailPictureIdRoute: PictureDetailPictureIdRoute,
  FolderDetailsFolderIdSubcategorySubcategoryIdRoute:
    FolderDetailsFolderIdSubcategorySubcategoryIdRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
