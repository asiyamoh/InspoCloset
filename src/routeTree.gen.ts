/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as WeddingRouteImport } from './routes/wedding';
import { Route as UploadRouteImport } from './routes/upload';
import { Route as NikahRouteImport } from './routes/nikah';
import { Route as HomeRouteImport } from './routes/home';
import { Route as BridesRouteImport } from './routes/brides';
import { Route as IndexRouteImport } from './routes/index';

const WeddingRoute = WeddingRouteImport.update({
  id: '/wedding',
  path: '/wedding',
  getParentRoute: () => rootRouteImport,
} as any);
const UploadRoute = UploadRouteImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRouteImport,
} as any);
const NikahRoute = NikahRouteImport.update({
  id: '/nikah',
  path: '/nikah',
  getParentRoute: () => rootRouteImport,
} as any);
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any);
const BridesRoute = BridesRouteImport.update({
  id: '/brides',
  path: '/brides',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/brides': typeof BridesRoute;
  '/home': typeof HomeRoute;
  '/nikah': typeof NikahRoute;
  '/upload': typeof UploadRoute;
  '/wedding': typeof WeddingRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/brides': typeof BridesRoute;
  '/home': typeof HomeRoute;
  '/nikah': typeof NikahRoute;
  '/upload': typeof UploadRoute;
  '/wedding': typeof WeddingRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/brides': typeof BridesRoute;
  '/home': typeof HomeRoute;
  '/nikah': typeof NikahRoute;
  '/upload': typeof UploadRoute;
  '/wedding': typeof WeddingRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/brides' | '/home' | '/nikah' | '/upload' | '/wedding';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/brides' | '/home' | '/nikah' | '/upload' | '/wedding';
  id:
    | '__root__'
    | '/'
    | '/brides'
    | '/home'
    | '/nikah'
    | '/upload'
    | '/wedding';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  BridesRoute: typeof BridesRoute;
  HomeRoute: typeof HomeRoute;
  NikahRoute: typeof NikahRoute;
  UploadRoute: typeof UploadRoute;
  WeddingRoute: typeof WeddingRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/wedding': {
      id: '/wedding';
      path: '/wedding';
      fullPath: '/wedding';
      preLoaderRoute: typeof WeddingRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/upload': {
      id: '/upload';
      path: '/upload';
      fullPath: '/upload';
      preLoaderRoute: typeof UploadRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/nikah': {
      id: '/nikah';
      path: '/nikah';
      fullPath: '/nikah';
      preLoaderRoute: typeof NikahRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/home': {
      id: '/home';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/brides': {
      id: '/brides';
      path: '/brides';
      fullPath: '/brides';
      preLoaderRoute: typeof BridesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BridesRoute: BridesRoute,
  HomeRoute: HomeRoute,
  NikahRoute: NikahRoute,
  UploadRoute: UploadRoute,
  WeddingRoute: WeddingRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
